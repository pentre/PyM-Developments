/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.Seller;

import view.Employee.*;
import controller.Controller;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingWorker;
import org.knowm.xchart.CategoryChart;
import org.knowm.xchart.CategoryChartBuilder;
import org.knowm.xchart.SwingWrapper;
import org.knowm.xchart.XChartPanel;
import org.knowm.xchart.style.Styler;

/**
 *
 * @author Luis
 */
public class ReportSellers extends javax.swing.JFrame {

    Controller controller_;

    /**
     * Creates new form SalesVsBranchReport
     */
    public ReportSellers(Controller controller) {
        controller_ = controller;
        initComponents();
        List<String> branches = controller.listBranches();
        for(String branch: branches){
            this.branchComboBox.addItem(branch);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ChartPanel = new javax.swing.JPanel();
        InitialDatePicker = new com.github.lgooddatepicker.components.DatePicker();
        EndDatePicker = new com.github.lgooddatepicker.components.DatePicker();
        branchComboBox = new javax.swing.JComboBox<>();
        exit = new javax.swing.JLabel();
        generateReport = new javax.swing.JLabel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ChartPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        ChartPanel.setLayout(new javax.swing.BoxLayout(ChartPanel, javax.swing.BoxLayout.LINE_AXIS));
        getContentPane().add(ChartPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 290, 980, 390));
        getContentPane().add(InitialDatePicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 120, 270, 40));
        getContentPane().add(EndDatePicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 120, 270, 40));

        branchComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todas las sedes" }));
        branchComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                branchComboBoxActionPerformed(evt);
            }
        });
        getContentPane().add(branchComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 120, 270, 40));

        exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitMouseClicked(evt);
            }
        });
        getContentPane().add(exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(931, 0, 110, 40));

        generateReport.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                generateReportMouseClicked(evt);
            }
        });
        getContentPane().add(generateReport, new org.netbeans.lib.awtextra.AbsoluteConstraints(331, 175, 380, 60));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui_resources/Report Seller.png"))); // NOI18N
        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 710));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void branchComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_branchComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_branchComboBoxActionPerformed

    private void exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMouseClicked
           this.dispose();
    }//GEN-LAST:event_exitMouseClicked

    private void generateReportMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_generateReportMouseClicked
       LocalDate initialDate = this.InitialDatePicker.getDate();
        LocalDate endDate = this.EndDatePicker.getDate();
        if (initialDate == null || endDate == null || initialDate.compareTo(endDate) > 0) {
            JOptionPane.showMessageDialog(this, "Error: debe seleccionar un rango de fechas valido", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        List<Map<String, String>> data = controller_.getSellersReport(initialDate, endDate, (String) this.branchComboBox.getSelectedItem());
        CategoryChart chart = new CategoryChartBuilder().width(800).height(600).title("Ventas vs Vendedor").xAxisTitle("Vendedor").yAxisTitle("Ventas Individuales").theme(Styler.ChartTheme.GGPlot2).build();
        System.out.println(data);
        if(data.isEmpty()){
            JOptionPane.showMessageDialog(this, "No hubo ninguna venta en las fechas dadas", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        for(Map<String, String> furniture: data){
            chart.addSeries(furniture.get("code_employee"), 
                    Arrays.asList(new String[] {(String)this.branchComboBox.getSelectedItem()}), 
                    Arrays.asList(new Number[] {Integer.valueOf(furniture.get("acum"))}));
        }
        JPanel chartPanelArea = new XChartPanel(chart);
        ChartPanel.removeAll();
        ChartPanel.revalidate();
        ChartPanel.repaint();
        ChartPanel.add(chartPanelArea);
        ChartPanel.validate();
        
    }//GEN-LAST:event_generateReportMouseClicked

    private CategoryChart getChart(Map<String, List> data) {
        List<String> branches = data.get("branches");
        List<Integer> values = data.get("values");

        CategoryChart chart = new CategoryChartBuilder().width(400).height(600).title("Total ventas por sede").xAxisTitle("Sedes").yAxisTitle("Ventas").build();

        chart.addSeries("Ventas", branches, values);
        chart.getStyler().setHasAnnotations(true);

        return chart;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ChartPanel;
    private com.github.lgooddatepicker.components.DatePicker EndDatePicker;
    private com.github.lgooddatepicker.components.DatePicker InitialDatePicker;
    private javax.swing.JLabel background;
    private javax.swing.JComboBox<String> branchComboBox;
    private javax.swing.JLabel exit;
    private javax.swing.JLabel generateReport;
    // End of variables declaration//GEN-END:variables

}
